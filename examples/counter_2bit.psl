import SailGate::Prelude::*, *;

interface Counter_2Bit<D : Domain> is
    //const D := Domain::Clock(#clk);

    const Value : Vec<2, D>;

    func Run() -> Counter_2Bit;
end interface Counter_2Bit

class Counter_2Bit is
exports
    func Run() -> Counter_2Bit is
        var Counter : UVec<2, D> := 0;
        Counter := Counter + 1;
        return (Value => Logic_Vec(Counter));
    end func Run
end class Counter_2Bit

interface Test_Counter_2Bit<> is
    const D2 := Domain::Clock(#clk);
    const Test_Out : Vec<2, D2>;

    func Run() -> Test_Counter_2Bit;
end interface Test_Counter_2Bit

class Test_Counter_2Bit is
exports
    func Run() -> Test_Counter_2Bit is
        const Counter := Counter_2Bit::<D2>::Run();
        return (Test_Out => Counter.Value);
    end func Run
end class Test_Counter_2Bit
