import PSC::Reflection;
import PSC::Reflection::Source_Position;
import SailGate::Prelude;

/// Interface between ParaSail AST and SailGate lowering
/// that serves as an "intermedite format". SailGate converts
/// DSL code into this common format, and then each target's
/// respective lowerer (just VHDL for now, but could include YOSYS
/// and Verilog in the future) converts it into RTL code.
interface SailGate::IR<> is
    type Scalar_Type is Enum<[#logic, #boolean]>;
    type Pos is optional Source_Position;

    interface Alignment<> is
        const Dir : Prelude::Vec_Dir;
        const Offset : Prelude::Natural;
        const Source : Pos;

        const Default := Alignment::(Dir => #default,
            Offset => 0, Source => null);
    end interface Alignment

    interface Vec_Type<> is
        type Type_Kind is Enum<[#logic, #int, #uint]>;

        const Kind : Type_Kind;
        const Size : Univ_Integer;
        const Align : Alignment;

        op "=?"(L, R : Vec_Type) -> Ordering;
        func To_String(V : Vec_Type) -> Univ_String;
    end interface Vec_Type

    /// Our own version of domain for internal use
    /// The one in prelude is to be used by the end user, so
    /// it has some additional encapsulation we don't need here
    interface Domain<> is
        const Kind : Prelude::Domain_Kind;
        const Decl : Reflection::Decl;
        const Name : Univ_String;

        op "=?"(L, R : Domain) -> Ordering;

        func Module(D : Domain) -> Univ_String;
        func Full_Name(D : Domain) -> Univ_String;
        func To_String(D : Domain) -> Univ_String;
        func Is_Canon_Async(D : Domain) -> Boolean;
        func Compatible(L, R : Domain) -> Boolean;
        func Force_Dom(L, R : Domain) -> Domain;
        func Ok_In_Module(D : Domain; Mod_Name : Univ_String) -> Boolean;
    end interface Domain

    /// RTL type qualified with clock domain
    interface Type<> is
        type Type_Kind is Enum<[#scalar, #vec]>;

        const Kind : Type_Kind;
        const Source : Pos;
        const Dom : Domain;

        func Create(S : Scalar_Type; Dom : Domain; Source : Pos) -> Type;
        func Create(K : Vec_Type::Type_Kind;
            S : Univ_Integer {S > 0};
            Dom : Domain; Source : Pos;
            A : Alignment := Alignment::Default) -> Type;

        func Get_Scalar(T : Type {T.Kind == #scalar}) -> Scalar_Type;
        func Get_Vec(T : Type {T.Kind == #vec}) -> Vec_Type;
        func To_String(T : Type) -> Univ_String;

        func Size(T : Type) -> Univ_Integer;
        func Valid_Field_Type(T : Type) -> Boolean;
        op "=?"(L, R : Type) -> Ordering;
    end interface Type

    interface Register<> is
        const Type : Type;
        const Name : Univ_String;
        const Init : optional Literal;
        const Source : Pos;
    end interface Register

    type Port_Def is Ordered_Map<Univ_String, Type>;
    type Reg_Def is Ordered_Map<Univ_String, Register>;
    type Scope_Item is Enum<[#input, #register, #wire, #instance, #domain]>;

    type Entity_Scope is Ordered_Map<Univ_String, Scope_Item>;
    type Domain_Map is Ordered_Map<Univ_String, Domain>;

    type Expr_List is Vector<Expression+>;
    type Expr_Map is Ordered_Map<Univ_String, Expression+>;

    abstract interface Concurrent_Def<> is
    end interface Concurrent_Def

    interface Wire<> implements Concurrent_Def<> is
        const Name : Univ_String;
        const Type : Type;
        const Source : Pos;
    end interface Wire

    interface Instance<> implements Concurrent_Def<> is
        const Name : Univ_String;
        const Inputs : Expr_Map;
        const Domain_Args : Vector<IR::Domain>;
        const Entity : Univ_String;
        const Source : Pos;
    end interface Instance

    type Concurrent_Defs is Vector<Concurrent_Def+>;

    abstract interface Literal_Value<> is
        func To_String(L : Literal_Value) -> Univ_String;
    end interface Literal_Value

    interface Literal_Str<> implements Literal_Value<> is
        const Str : Univ_String;
        func To_String(L : Literal_Str) -> Univ_String
            is ("\"" | L.Str | "\"");
    end interface Literal_Str

    interface Literal_Num<> implements Literal_Value<> is
        const Num : Univ_Integer;
        func To_String(L : Literal_Num) -> Univ_String
            is (To_String(L.Num));
    end interface Literal_Num

    interface Literal_Char<> implements Literal_Value<> is
        const Ch : Univ_Character;
        func To_String(L : Literal_Char) -> Univ_String
            is ("'" | L.Ch | "'");
    end interface Literal_Char

    abstract interface Expression<> is
        func Get_Type(E : Expression) -> Type;
        func To_String(E : Expression) -> Univ_String;
        func Get_Source(E : Expression) -> Pos;
    end interface Expression

    interface Identifier<> implements Expression<> is
        const Name : Univ_String;
        const Type : Type;
        const Source : Pos;

        func Get_Type(I : Identifier) -> Type is (I.Type);
        func To_String(I : Identifier) -> Univ_String is (I.Name);
        func Get_Source(I : Identifier) -> Pos is (I.Source);
    end interface Identifier

    interface Inst_Access<> implements Expression<> is
        const Name : Univ_String;
        const Property : Univ_String;
        const Type : Type;
        const Source : Pos;

        func Get_Type(I : Inst_Access) -> Type is (I.Type);
        func To_String(I : Inst_Access) -> Univ_String
            is (I.Name | "." | I.Property);
        func Get_Source(I : Inst_Access) -> Pos is (I.Source);
    end interface Inst_Access

    interface Literal<> implements Expression<> is
        const Value : Literal_Value+;
        const Type : Type;
        const Source : Pos;

        func Get_Type(L : Literal) -> Type is (L.Type);
        func To_String(L : Literal) -> Univ_String is (To_String(L.Value));
        func Get_Source(L : Literal) -> Pos is (L.Source);
    end interface Literal

    type Binary_Op is Enum<[#plus_op, #minus_op, #times_op,
        #divide_op, #combine_op, #left_shift_op, #right_shift_op,
        #and_op, #or_op, #xor_op, #less_op, #leq_op,
        #equal_op, #neq_op, #geq_op, #greater_op, #combine_op]>
    type Unary_Op is Enum<[#not_op, #minus_op]>;
    type Conversion_Op is Enum<[#to_uint, #to_int, #to_vec,
        #sync, #unsafe_cast]>;

    interface Binary<> implements Expression<> is
        const Left : Expression+;
        const Right : Expression+;
        const Op : Binary_Op;
        const Type : Type;
        const Source : Pos;

        func Get_Type(B : Binary) -> Type is (B.Type);
        func To_String(B : Binary) -> Univ_String is ("(" | To_String(B.Op) |
            ": " | To_String(B.Left) | ", " | To_String(B.Right) | ")");
        func Get_Source(B : Binary) -> Pos is (B.Source);
    end interface Binary

    interface Unary<> implements Expression<> is
        const Value : Expression+;
        const Op : Unary_Op;
        const Type : Type;
        const Source : Pos;

        func Get_Type(U : Unary) -> Type is (U.Type);
        func To_String(U : Unary) -> Univ_String is ("(" |
            To_String(U.Op) | ": " | To_String(U.Value) | ")");
        func Get_Source(U : Unary) -> Pos is (U.Source);
    end interface Unary

    interface Slice<> implements Expression<> is
        const Start : Univ_Integer;
        const End : Univ_Integer;
        const Value : Expression+;
        const Type : Type;
        const Source : Pos;

        func Get_Type(S : Slice) -> Type is (S.Type);
        func To_String(S : Slice) -> Univ_String is ("(slice: " |
            To_String(S.Value) | ", " | S.Start | ", " | S.End | ")");
        func Get_Source(S : Slice) -> Pos is (S.Source);
    end interface Slice

    interface Index<> implements Expression<> is
        const Index : Univ_Integer;
        const Value : Expression+;
        const Type : Type;
        const Source : Pos;

        func Get_Type(I : Index) -> Type is (I.Type);
        func To_String(I : Index) -> Univ_String is ("(index: " |
            To_String(I.Value) | ", " | I.Index | ")");
        func Get_Source(I : Index) -> Pos is (I.Source);
    end interface Index

    interface Conversion<> implements Expression<> is
        const Converted : Expression+;
        const To : Type;
        const Op : Conversion_Op;
        const Source : Pos;

        func Get_Type(C : Conversion) -> Type is (C.To);
        func Get_From_Type(C : Conversion) -> Type is (Get_Type(C.Converted));
        func To_String(C : Conversion) -> Univ_String is ("(" | 
            To_String(C.Op) | ": " | To_String(C.Converted) | ")");
        func Get_Source(C : Conversion) -> Pos is (C.Source);
    end interface Conversion

    abstract interface Statement<> is
        func Get_Dom(S : Statement) -> Domain;
        func Get_Source(S : Statement) -> Pos;
    end interface Statement

    type Block is Vector<Statement+>;

    interface Condition_Body<> is
        const Condition : Expression+;
        const Body : Block;
    end interface Condition_Body

    interface Assignment<> implements Statement<> is
        const Asignee : Expression+;
        const Value : Expression+;
        const Source : Pos;

        func Get_Dom(A : Assignment) -> Domain is (Get_Type(A.Value).Dom);
        func Get_Source(A : Assignment) -> Pos is (A.Source);
    end interface Assignment

    interface If_Chain<> implements Statement<> is
        const Dom : Domain;
        const Base : Condition_Body;
        const Elifs : Vector<Condition_Body>;
        const Else : optional Block;
        const Source : Pos;

        func Get_Dom(I : If_Chain) -> Domain is (I.Dom);
        func Get_Source(I : If_Chain) -> Pos is (I.Source);
    end interface If_Chain

    type Literals is Vector<Literal>;

    interface Case_Check<> is
        const Values : Literals;
        const Body : Block;
    end interface Case_Check

    interface Switch_Case<> implements Statement<> is
        const Expr : Expression+;
        const Cases : Vector<Case_Check>;
        const Default : optional Block;
        const Source : Pos;

        func Get_Dom(S : Switch_Case) -> Domain is (Get_Type(S.Expr).Dom);
        func Get_Source(S : Switch_Case) -> Pos is (S.Source);
    end interface Switch_Case

    abstract interface Process<> is
    end interface Process

    interface Dom_Process<> implements Process<> is
        const Dom : Domain;
        const Body : Block;
    end interface Dom_Process

    interface Empty_Process<> implements Process<> is
        const Body : Block;
    end interface Empty_Process

    type Implicit_Processes is Ordered_Map<Univ_String, Dom_Process>;
    type Processes is Vector<Process+>;

    /// Local signature used by entity
    interface Component<> is
        const Full_Name : Univ_String;
        const Dom_Args : Ordered_Map<Univ_String, Univ_String>;
    end interface Component

    interface Entity<> is
        const Scope : Entity_Scope;
        const Name : Univ_String;
        const Is_Top_Level : Boolean;

        const Inputs : Port_Def;
        const Outputs : Port_Def;
        const Output_Values : Expr_Map;
        const Registers : Reg_Def;
        const Components : Vector<Component>;

        const Domains : Domain_Map;
        const Impl : Implicit_Processes;
        const Test_Bench : optional Empty_Process;
        const Concurrent : Concurrent_Defs;
    end interface Entity
end interface SailGate::IR
