class SailGate::IR is
exports
    class Vec_Type is
    exports
        op "=?"(L, R : Vec_Type) -> Ordering is
            if L.Kind == R.Kind and then L.Size == R.Size then
                return #equal;
            end if
            return #unordered;
        end op "=?"

        func To_String(V : Vec_Type) -> Univ_String is
            return To_String(V.Kind) | "(" | V.Size | ", " |
                To_String(V.Align.Dir) | ", " | V.Align.Offset | ")";
        end func To_String
    end class Vec_Type

    class Domain is
    exports
        func To_String(D : Domain) -> Univ_String is
            return To_String(D.Kind) | "(" | D.Name | ")";
        end func To_String
    end class Domain

    class Type is
        const Scalar : optional Scalar_Type;
        const Vec : optional Vec_Type;
    exports
        func Create(S : Scalar_Type; Dom : Domain; Source : Pos) -> Type is
            return (Kind => #scalar, Scalar => S, Vec => null,
                Dom => Dom, Source => Source);
        end func Create

        func Create(K : Vec_Type::Type_Kind; S : Univ_Integer; Dom : Domain; 
                Source : Pos; A : Alignment) -> Type is
            return (Kind => #vec, Scalar => null, Source => Source,
                Dom => Dom, Vec => (Kind => K, Size => S, Align => A));
        end func Create

        func Get_Scalar(T : Type) -> Scalar_Type is
            return T.Scalar;
        end func Get_Scalar

        func Get_Vec(T : Type) -> Vec_Type is
            return T.Vec;
        end func Get_Vec

        func To_String(T : Type) -> Univ_String is
            var Type_Str := "";
            case T.Kind of
                [#scalar] =>
                    Type_Str := To_String(Get_Scalar(T));
                [#vec] =>
                    Type_Str := To_String(Get_Vec(T));
            end case
            return "Type(" | Type_Str | ", " | To_String(T.Dom) | ")";
        end func To_String

        op "=?"(L, R : Type) -> Ordering is
            case L.Kind of
                [#scalar] => return (Get_Scalar(L) =? Get_Scalar(R));
                [#vec] => return (Get_Vec(L) =? Get_Vec(R));
            end case
        end op "=?"

        func Valid_Field_Type(T : Type) -> Boolean is
            case T.Kind of
                [#scalar] => return Get_Scalar(T) == #logic;
                [#vec] => return #true;
            end case
        end func Valid_Field_Type
    end class Type
end class SailGate::IR
