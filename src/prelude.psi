/// SailGate type library
/// These are the types used by the end user to describe digital circuits
interface SailGate::Prelude<> is
    type Vec_Size is Integer<1..2**31-1>;
    type Natural is Integer<0..2**31-1>;

    type Domain_Kind is Enum<[#async, #clock, #clock_reset, #clock_reset_en]>;
    func Clock(D : Domain_Kind) -> Boolean;
    func Reset(D : Domain_Kind) -> Boolean;
    func Clk_Rst_En(D : Domain_Kind) -> Boolean;

    /// Object representing a value's clock domain
    interface Domain<> is
        func Has_Clock(D : Domain) -> Boolean;
        func Has_Reset(D : Domain) -> Boolean;
        func Has_Enable(D : Domain) -> Boolean;

        func Get_Async() -> Domain;
        func Clock(Name : Univ_Enumeration {Name != #async}) -> Domain;
        func Clock_Reset(Name : Univ_Enumeration {Name != #async}) -> Domain;
        func Clock_Reset_Enable(Name : Univ_Enumeration {Name != #async}) -> Domain;

        func Rising(D : Domain) -> Boolean;
        func Falling(D : Domain) -> Boolean;

        op "=?"(L, R : Domain) -> Ordering;
    end interface Domain

    const Async := Domain::Get_Async();

    /// Utility functions used for checking conversion
    interface Util<> is
        func Is_Logic_Char(S : Univ_Character) -> Boolean;
        func Is_Bit_Char(S : Univ_Character) -> Boolean;
        func Is_Vec_Str(S : Univ_String; SZ : Vec_Size) -> Boolean;
        func In_UBounds(U : Univ_Integer; SZ : Vec_Size) -> Boolean;
        func In_SBounds(U : Univ_Integer; SZ : Vec_Size) -> Boolean;
        func Calc_Slice_Size(Original_Size : Vec_Size;
            Start : Natural; End : Natural) -> Vec_Size;
        func Force_Dom(A : Domain; B : Domain) -> Domain;
    end interface Util

    /// RTL types without clock domains. These types are used for case/switch
    /// comparisons exclusively. The Rtl_Ordering gives ParaSail's case construct
    /// issues. These types only implement univ conversions and comparison
    interface Switch_Values<> is
        interface Logic<> is
            op "from_univ"(S : Univ_Character
                {Util::Is_Logic_Char(S)}) -> Logic;
            op "=?"(L, R : Logic) -> Ordering;
        end interface Logic

        interface Vec<Size : Vec_Size> is
            op "from_univ"(Univ : Univ_Integer
                {Util::In_UBounds(Univ, Size)}) -> Vec;
            op "from_univ"(U : Univ_String
                {Util::Is_Vec_Str(U, Size)}) -> Vec;
            op "=?"(L, R : Vec) -> Ordering;
        end interface Vec

        interface IVec<Size : Vec_Size> is
            op "from_univ"(Univ : Univ_Integer
                {Util::In_SBounds(Univ, Size)}) -> IVec;
            op "from_univ"(U : Univ_String
                {Util::Is_Vec_Str(U, Size)}) -> IVec;
            op "=?"(L, R : IVec) -> Ordering;
        end interface IVec

        interface UVec<Size : Vec_Size> is
            op "from_univ"(Univ : Univ_Integer
                {Util::In_UBounds(Univ, Size)}) -> UVec;
            op "from_univ"(U : Univ_String
                {Util::Is_Vec_Str(U, Size)}) -> UVec;
            op "=?"(L, R : UVec) -> Ordering;
        end interface UVec
    end interface Switch_Values

    /// Boolean type that is bound to a clock domain.
    /// This ensures that condition expressions do not cross
    /// clock domains
    interface Rtl_Bool<Dom : Domain> is
        op "not"(L : Rtl_Bool) -> Rtl_Bool;
        op "and"(L, R : Rtl_Bool) -> Rtl_Bool;
        op "or"(L, R : Rtl_Bool) -> Rtl_Bool;
        op "from_univ"(Univ : Univ_Enumeration {Univ == #true
            or else Univ == #false}) -> Rtl_Bool;
        op "to_bool"(R : Rtl_Bool) -> Boolean;
        func Unsafe_Cast(B : OB is Rtl_Bool<>) -> Rtl_Bool;
        func Sync(B : Rtl_Bool<Async>) -> Rtl_Bool;
    end interface Rtl_Bool

    /// Special ordering type used for RTL conversions
    interface Rtl_Ordering<Dom : Domain> is
        func Create(Ord : Ordering) -> Rtl_Ordering;
        op "to_bool"(Ord : Rtl_Ordering; Mask : Univ_Integer) -> Rtl_Bool<Dom>;
    end interface Rtl_Ordering

    /// Base RTL type. Outlines basic operations all RTL type should have
    abstract interface Rtl_Type<Dom : Domain> is
        op "not"(L : Rtl_Type) -> Rtl_Type;
        op "and"(Left, R : Rtl_Type) -> Rtl_Type;
        op "or"(Left, R : Rtl_Type) -> Rtl_Type;
        op "xor"(Left, R : Rtl_Type) -> Rtl_Type;
        op "=?"(L, R : Rtl_Type) -> Rtl_Ordering<Dom>;
    end interface Rtl_Type

    /// Base scalar type
    abstract interface Scalar_Type<Dom : Domain> extends Rtl_Type<Dom> is
    end interface Scalar_Type

    /// Base logical unit. Represents a wire signal. This can be 0, 1, unknown,
    /// high-impedance, or don't care. Each value corresponds to a YOSYS bit value
    interface Logic<Dom : Domain := Async> implements Scalar_Type<Dom> is
        op "from_univ"(S : Univ_Character {Util::Is_Logic_Char(S)}) -> Logic;

        op "not"(L : Logic) -> Logic;
        op "and"(Left, R : Logic) -> Logic;
        op "or"(Left, R : Logic) -> Logic;
        op "xor"(Left, R : Logic) -> Logic;
        op "=?"(L, R : Logic) -> Rtl_Ordering<Dom>;
        op "|"(L, R : Logic) -> Vec<2, Dom>;

        func Unsafe_Cast(L : Logic) -> Logic<Async>;
        func Sync(L : Logic<Async>) -> Logic;
        func Switch(L : Logic) -> Switch_Values::Logic;
    end interface Logic

    // Checked vector index
    interface Vec_Index<Size : Vec_Size> is
        const Val : Univ_Integer;
        op "from_univ"(U : Univ_Integer {U < Size}) -> Vec_Index;
    end interface Vec_Index

    type Vec_Dir is Enum<[#default, #up, #down]>;
    func Align(Dir : Vec_Dir := #default; Offset : Natural := 0) -> Boolean;

    /// Base type for vector RTL types
    abstract interface Vec_Rtl_Type<Size : Vec_Size; Dom : Domain; T is Scalar_Type<Dom>>
            extends Rtl_Type<Dom> is
        op "not"(L : Vec_Rtl_Type) -> Vec_Rtl_Type;
        op "and"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
        op "or"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
        op "xor"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
        op "=?"(L, R : Vec_Rtl_Type) -> Rtl_Ordering<Dom>;
        op "indexing"(M : Vec_Rtl_Type; Key : Vec_Index<Size>) -> T;
        op "var_indexing"(ref var M : Vec_Rtl_Type; Key : Vec_Index<Size>) -> ref var T;
    end interface Vec_Rtl_Type

    /// Base type for logic vectors
    abstract interface Base_Logic_Vec<Size : Vec_Size; Dom : Domain>
        extends Vec_Rtl_Type<Size, Dom, Logic<Dom>> is
    end interface Base_Logic_Vec

    /// Logic vector type. Represents a bundle of wires of length S.
    /// Corresponds with logic_vec in VHDL.
    interface Vec<Size : Vec_Size; Dom : Domain := Async> implements Base_Logic_Vec<Size, Dom> is
        op "not"(L : Vec) -> Vec;
        op "and"(L, R : Vec) -> Vec;
        op "or"(L, R : Vec) -> Vec;
        op "xor"(L, R : Vec) -> Vec;
        op "=?"(L, R : Vec) -> Rtl_Ordering<Dom>;
        op "indexing"(M : Vec; Key : Vec_Index<Size>) -> Logic<Dom>;
        op "var_indexing"(ref var M : Vec; Key : Vec_Index<Size>) -> ref var Logic<Dom>;
        op "|"(L : Vec; R : OV is Vec<>) ->
            (Result_Vec is Vec<Size + OV::Size, Util::Force_Dom(Dom, OV::Dom)>);
        op "|"(L : Vec; R : Logic<Dom>) -> (Result_Vec is Vec<Size + 1, Dom>);
        op "|"(L : Logic<Dom>; R : Vec) -> (Result_Vec is Vec<Size + 1, Dom>);
        op "from_univ"(Univ : Univ_Integer {Util::In_UBounds(Univ, Size)}) -> Vec;
        op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, Size)}) -> Vec;
        func Unsafe_Cast(V : Vec) -> Vec<Size, Async>;
        func Sync(V : Vec<Size, Async>) -> Vec;
        func Switch(V : Vec) -> Switch_Values::Vec<Size>;
        func To_IVec(V : Vec) -> IVec<Size, Dom>;
        func To_UVec(V : Vec) -> UVec<Size, Dom>;
    end interface Vec

    /// Base type for signed logic vectors
    abstract interface Base_Int_Vec<Size : Vec_Size; Dom : Domain>
            extends Base_Logic_Vec<Size, Dom> is
        op ">>"(L, R : Base_Int_Vec) -> Base_Int_Vec;
        op "<<"(L, R : Base_Int_Vec) -> Base_Int_Vec;
        op "+"(L, R : Base_Int_Vec) -> Base_Int_Vec;
        op "-"(L, R : Base_Int_Vec) -> Base_Int_Vec;
        op "*"(L, R : Base_Int_Vec) -> Base_Int_Vec;
        op "/"(L, R : Base_Int_Vec) -> Base_Int_Vec;
        op "mod"(L, R : Base_Int_Vec) -> Base_Int_Vec;
        func Logic_Vec(V : Base_Int_Vec) -> Vec<Size, Dom>;
    end interface Base_Int_Vec

    /// Represents a logic vector that carries a signed integer value.
    /// Allows signed arithmetic operations to be applied to value.
    interface IVec<Size : Vec_Size; Dom : Domain := Async> is
        op "not"(L : IVec) -> IVec;
        op "and"(L, R : IVec) -> IVec;
        op "or"(L, R : IVec) -> IVec;
        op "xor"(L, R : IVec) -> IVec;
        op "=?"(L, R : IVec) -> Rtl_Ordering<Dom>;
        op "indexing"(M : IVec; Key : Vec_Index<Size>) -> Logic<Dom>;
        op "var_indexing"(ref var M : IVec; Key : Vec_Index<Size>) -> ref var Logic<Dom>;
        op "|"(L : IVec; R : OV is IVec<>) ->
            (Result_Vec is IVec<Size + OV::Size, Util::Force_Dom(Dom, OV::Dom)>);
        op "|"(L : IVec; R : Logic<Dom>) -> (Result_Vec is IVec<Size + 1, Dom>);
        op "|"(L : Logic<Dom>; R : IVec) -> (Result_Vec is IVec<Size + 1, Dom>);
        op ">>"(L, R : IVec) -> IVec;
        op "<<"(L, R : IVec) -> IVec;
        op "+"(L, R : IVec) -> IVec;
        op "-"(L, R : IVec) -> IVec;
        op "*"(L, R : IVec) -> IVec;
        op "/"(L, R : IVec) -> IVec;
        op "mod"(L, R : IVec) -> IVec;
        op "from_univ"(Univ : Univ_Integer {Util::In_SBounds(Univ, Size)}) -> IVec;
        op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, Size)}) -> IVec;
        func Unsafe_Cast(V : IVec) -> IVec<Size, Async>;
        func Sync(V : IVec<Size, Async>) -> IVec;
        func Switch(V : IVec) -> Switch_Values::IVec<Size>;
        func Logic_Vec(V : IVec) -> Vec<Size, Dom>;
    end interface IVec

    /// Represents a logic vector that carries an unsigned integer value.
    /// Allows unsigned arithmetic operations to be applied to value.
    interface UVec<Size : Vec_Size; Dom : Domain := Async> is
        op "not"(L : UVec) -> UVec;
        op "and"(L, R : UVec) -> UVec;
        op "or"(L, R : UVec) -> UVec;
        op "xor"(L, R : UVec) -> UVec;
        op "=?"(L, R : UVec) -> Rtl_Ordering<Dom>;
        op "indexing"(M : UVec; Key : Vec_Index<Size>) -> Logic<Dom>;
        op "var_indexing"(ref var M : UVec; Key : Vec_Index<Size>) -> ref var Logic<Dom>;
        op "|"(L : UVec; R : OV is UVec<>) ->
            (Result_Vec is UVec<Size + OV::Size, Util::Force_Dom(Dom, OV::Dom)>);
        op "|"(L : UVec; R : Logic<Dom>) -> (Result_Vec is UVec<Size + 1, Dom>);
        op "|"(L : Logic<Dom>; R : UVec) -> (Result_Vec is UVec<Size + 1, Dom>);
        op ">>"(L, R : UVec) -> UVec;
        op "<<"(L, R : UVec) -> UVec;
        op "+"(L, R : UVec) -> UVec;
        op "-"(L, R : UVec) -> UVec;
        op "*"(L, R : UVec) -> UVec;
        op "/"(L, R : UVec) -> UVec;
        op "mod"(L, R : UVec) -> UVec;
        op "from_univ"(Univ : Univ_Integer {Util::In_UBounds(Univ, Size)}) -> UVec;
        op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, Size)}) -> UVec;
        func Unsafe_Cast(V : UVec) -> UVec<Size, Async>;
        func Sync(V : UVec<Size, Async>) -> UVec;
        func Switch(V : UVec) -> Switch_Values::UVec<Size>;
        func Logic_Vec(V : UVec) -> Vec<Size, Dom>;
    end interface UVec

    interface Range<Start : Natural; End : Natural> is
        func Slice(V : In_Vec is Vec<>) -> (Ret_Vec is
            Vec<Util::Calc_Slice_Size(In_Vec::Size, Start, End), In_Vec::Dom>);
        func Slice(V : In_Vec is IVec<>) -> (Ret_Vec is
            IVec<Util::Calc_Slice_Size(In_Vec::Size, Start, End), In_Vec::Dom>);
        func Slice(V : In_Vec is UVec<>) -> (Ret_Vec is
            UVec<Util::Calc_Slice_Size(In_Vec::Size, Start, End), In_Vec::Dom>);
    end interface Range
end interface SailGate::Prelude
