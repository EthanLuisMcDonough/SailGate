/// Mostly empty implementations for RTL types. Most functions will
/// remain unimplemented because they aren't meant to be run. They're
/// here so the user can define entities inside ParaSail's syntax.
/// The methods that are defined are related to compile-time conversion.

class SailGate::Prelude is
exports
    func Has_Clock(D : Domain_Kind) -> Boolean is
        case D of
            [#clock | #clock_reset | #clock_reset_en] => return #true;
            [..] => return #false;
        end case
    end func Has_Clock

    func Has_Reset(D : Domain_Kind) -> Boolean is
        case D of
            [#clock_reset | #clock_reset_en] => return #true;
            [..] => return #false;
        end case
    end func Has_Reset

    func Has_Enable(D : Domain_Kind) -> Boolean is
        case D of
            [#clock_reset_en] => return #true;
            [..] => return #false;
        end case
    end func Has_Enable

    class Domain is
        const Kind : Domain_Kind;
        const Name : Univ_Enumeration;
    exports
        func Has_Clock(D : Domain) -> Boolean is
            return Has_Clock(D.Kind);
        end func Has_Clock

        func Has_Reset(D : Domain) -> Boolean is
            return Has_Reset(D.Kind);
        end func Has_Reset

        func Has_Enable(D : Domain) -> Boolean is
            return Has_Enable(D.Kind);
        end func Has_Enable

        func Get_Async() -> Domain is
            return (Name => #async, Kind => #async);
        end func Get_Async

        func Clock(Name : Univ_Enumeration) -> Domain is
            return (Name => Name, Kind => #clock);
        end func Clock

        func Clock_Reset(Name : Univ_Enumeration) -> Domain is
            return (Name => Name, Kind => #clock_reset);
        end func Clock_Reset

        func Clock_Reset_Enable(Name : Univ_Enumeration) -> Domain is
            return (Name => Name, Kind => #clock_reset_en);
        end func Clock_Reset_Enable

        op "=?"(L, R : Domain) -> Ordering is
            if L is null or else R is null then
                return (if L is null and then R is null then #equal else #unordered);
            end if

            if L.Name == R.Name then
                {*"Clock domain name conflict"* L.Kind == R.Kind}
                return #equal;
            else
                return #unordered;
            end if
        end op "=?"

        func Rising(D : Domain) -> Boolean is
            return #true;
        end func Rising

        func Falling(D : Domain) -> Boolean is
            return #true;
        end func Falling
    end class Domain

    /// Implementations for utility types and functions
    class Util is
    exports
        func Is_Logic_Char(S : Univ_Character) -> Boolean is
            return S == 'X' or S == 'Z' or S == 'T' or
                S == 'F' or S == '-';
        end func Is_Logic_Char

        func Is_Bit_Char(S : Univ_Character) -> Boolean is
            return S == '0' or S == '1';
        end func Is_Bit_Char

        func Is_Vec_Str(S : Univ_String; SZ : Vec_Size) -> Boolean is
            return Length(S) == SZ and (for all I in Bounds(S) =>
                Util::Is_Bit_Char(S[I]));
        end func Is_Vec_Str

        func In_UBounds(U : Univ_Integer; SZ : Vec_Size) -> Boolean is
            return U >= 0 and U < (2 ** SZ);
        end func In_UBounds

        func In_SBounds(U : Univ_Integer; SZ : Vec_Size) -> Boolean is
            const Half_Unsigned := (2 ** SZ) / 2;
            return U >= -Half_Unsigned and U < Half_Unsigned;
        end func In_SBounds

        func Calc_Slice_Size(Original_Size : Vec_Size;
                Start : Natural; End : Natural) -> Vec_Size is
            {*"Slice start must be smaller than vec length"*
                [[Start]] < [[Original_Size]]}
            {*"Slice end must be smaller than vec length"*
                [[End]] < [[Original_Size]]}
            return [[|Start - End| + 1]];
        end func Calc_Slice_Size

        func Force_Dom(A : Domain; B : Domain) -> Domain is
            {*"Operand clock domains do not match"* A == Async 
                or else B == Async or else A == B}
            return (if A == Async then B else A);
        end func Force_Dom
    end class Util

    class Rtl_Bool is
        const Value : Boolean;
    exports
        op "not"(L : Rtl_Bool) -> Rtl_Bool is
            return (Value => not L.Value);
        end op "not"

        op "and"(L, R : Rtl_Bool) -> Rtl_Bool is
            return (Value => L.Value and R.Value);
        end op "and"

        op "or"(L, R : Rtl_Bool) -> Rtl_Bool is
            return (Value => L.Value or R.Value);
        end op "or"

        op "from_univ"(Univ : Univ_Enumeration) -> Rtl_Bool is
            return (Value => Univ);
        end op "from_univ"

        op "to_bool"(R : Rtl_Bool) -> Boolean is
            return R.Value;
        end op "to_bool"
    end class Rtl_Bool

    class Rtl_Ordering is
        const Ord : Ordering;
    exports
        func Create(Ord : Ordering) -> Rtl_Ordering is
            return (Ord => Ord);
        end func Create

        op "to_bool"(Ord : Rtl_Ordering; Mask : Univ_Integer) -> Rtl_Bool<DOM> is
            return "to_bool"(Ord, Mask);
        end op "to_bool"
    end class Rtl_Ordering

    class Logic is
    exports
        op "from_univ"(Univ : Univ_Enumeration) -> Logic is
            return with (Value => Univ);
        end op "from_univ"

        op "from_univ"(Univ : Univ_Integer) -> Logic is
            case Univ of
                [0] => return #false
                [..] => return #true
            end case
        end op "from_univ"

        op "from_univ"(S : Univ_Character) -> Logic is
            case S of
                ['T'] => return #true
                ['F'] => return #false
                ['-'] => return #dont_care
                ['X'] => return #x
                ['Z'] => return #z
            end case
        end op "from_univ"

        op "not"(L : Logic) -> Logic is
            case L.Value of
                [#true] => return #false
                [#false] => return #true
                [..] => return L
            end case
        end op "not"

        op "and"(Left, R : Logic) -> Logic is
            {#false}
        end op "and"

        op "or"(Left, R : Logic) -> Logic is
            {#false}
        end op "or"

        op "xor"(Left, R : Logic) -> Logic is
            {#false}
        end op "xor"

        op "=?"(L, R : Logic) -> Rtl_Ordering<D> is
            {#false}
        end op "=?"
    end class Logic

    class Vec_Index is
    exports
        op "from_univ"(U : Univ_Integer) -> Vec_Index is
            return with (Val => U);
        end op "from_univ"
    end class Vec_Index

    class Vec is
        var Internal_Ref : Logic<D>;
    exports
        op "from_univ"(Univ : Univ_Integer) -> Vec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "from_univ"(U : Univ_String) -> Vec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "not"(L : Vec) -> Vec is
            return L
        end op "not"

        op "and"(L, R : Vec) -> Vec is
            return L
        end op "and"

        op "or"(L, R : Vec) -> Vec is
            return L
        end op "or"

        op "xor"(L, R : Vec) -> Vec is
            return L
        end op "xor"

        op "=?"(L, R : Vec) -> Rtl_Ordering<D> is
            {#false}
        end op "=?"

        op "indexing"(M : Vec; Key : Vec_Index<S>) -> Logic<D> is
            return #false;
        end op "indexing"

        op "var_indexing"(ref var M : Vec; Key : Vec_Index<S>) -> ref var Logic<D> is
            return M.Internal_Ref;
        end op "var_indexing"

        op "|"(L : Vec; R : OV is Vec<>) -> (Result_Vec is Vec<S + OV::S,
                Util::Force_Dom(D, OV::D)>) is
            {#false}
        end op "|"
    end class Vec

    class IVec is
        var Internal_Ref : Logic<D>;
    exports
        op "from_univ"(Univ : Univ_Integer) -> IVec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "from_univ"(U : Univ_String) -> IVec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "not"(L : IVec) -> IVec is
            return L
        end op "not"

        op "and"(L, R : IVec) -> IVec is
            return L
        end op "and"

        op "or"(L, R : IVec) -> IVec is
            return L
        end op "or"

        op "xor"(L, R : IVec) -> IVec is
            return L
        end op "xor"

        op "=?"(L, R : IVec) -> Rtl_Ordering<D> is
            {#false}
        end op "=?"

        op ">>"(L, R : IVec) -> IVec is
            return L
        end op ">>"

        op "<<"(L, R : IVec) -> IVec is
            return L
        end op "<<"

        op "+"(L, R : IVec) -> IVec is
            return L
        end op "+"

        op "-"(L, R : IVec) -> IVec is
            return L
        end op "-"

        op "*"(L, R : IVec) -> IVec is
            return L
        end op "*"

        op "/"(L, R : IVec) -> IVec is
            return L
        end op "/"

        op "mod"(L, R : IVec) -> IVec is
            return L
        end op "mod"

        op "indexing"(M : IVec; Key : Vec_Index<S>) -> Logic<D> is
            return #false;
        end op "indexing"

        op "var_indexing"(ref var M : IVec; Key : Vec_Index<S>) -> ref var Logic<D> is
            return M.Internal_Ref;
        end op "var_indexing"

        op "|"(L : IVec; R : OV is IVec<>) -> (Result_Vec is IVec<S + OV::S,
                Util::Force_Dom(D, OV::D)>) is
            {#false}
        end op "|"

        func Logic_Vec(V : IVec) -> Vec<S, D> is
            return (Internal_Ref => 0);
        end func Logic_Vec
    end class IVec

    class UVec is
        var Internal_Ref : Logic<D>;
    exports
        op "from_univ"(Univ : Univ_Integer) -> UVec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "from_univ"(U : Univ_String) -> UVec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "not"(L : UVec) -> UVec is
            return L
        end op "not"

        op "and"(L, R : UVec) -> UVec is
            return L
        end op "and"

        op "or"(L, R : UVec) -> UVec is
            return L
        end op "or"

        op "xor"(L, R : UVec) -> UVec is
            return L
        end op "xor"

        op "=?"(L, R : UVec) -> Rtl_Ordering<D> is
            {#false}
        end op "=?"

        op ">>"(L, R : UVec) -> UVec is
            return L
        end op ">>"

        op "<<"(L, R : UVec) -> UVec is
            return L
        end op "<<"

        op "+"(L, R : UVec) -> UVec is
            return L
        end op "+"

        op "-"(L, R : UVec) -> UVec is
            return L
        end op "-"

        op "*"(L, R : UVec) -> UVec is
            return L
        end op "*"

        op "/"(L, R : UVec) -> UVec is
            return L
        end op "/"

        op "mod"(L, R : UVec) -> UVec is
            return L
        end op "mod"

        op "indexing"(M : UVec; Key : Vec_Index<S>) -> Logic<D> is
            return #false;
        end op "indexing"

        op "var_indexing"(ref var M : UVec; Key : Vec_Index<S>) -> ref var Logic<D> is
            return M.Internal_Ref;
        end op "var_indexing"

        op "|"(L : UVec; R : OV is UVec<>) -> (Result_Vec is UVec<S + OV::S,
                Util::Force_Dom(D, OV::D)>) is
            {#false}
        end op "|"

        func Logic_Vec(V : UVec) -> Vec<S, D> is
            return (Internal_Ref => 0);
        end func Logic_Vec
    end class UVec

    class Range is
    exports
        func Slice(V : In_Vec is Vec<>) -> (Ret_Vec is
                Vec<Util::Calc_Slice_Size(In_Vec::S, S, E), In_Vec::D>) is
            {#false}
        end func Slice
    end class Range
end class SailGate::Prelude
