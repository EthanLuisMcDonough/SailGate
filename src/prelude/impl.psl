/// Mostly empty implementations for RTL types. Most functions will
/// remain unimplemented because they aren't meant to be run. They're
/// here so the user can define entities inside ParaSail's syntax.
/// The methods that are defined are related to compile-time conversion.

class SailGate::Prelude::Logic is
exports
    op "from_univ"(Univ : Univ_Enumeration) -> Logic is
        return with (Value => Univ);
    end op "from_univ"

    op "to_univ"(L : Logic) -> Univ_Enumeration is
        return L.Value
    end op "to_univ"

    op "from_univ"(Univ : Univ_Integer) -> Logic is
        case Univ of
            [0] => return #false
            [..] => return #true
        end case
    end op "from_univ"

    op "from_univ"(S : Univ_Character) -> Logic is
        case S of
            ['T'] => return #true
            ['F'] => return #false
            ['-'] => return #dont_care
            ['X'] => return #x
            ['Z'] => return #z
        end case
    end op "from_univ"

    op "not"(L : Logic) -> Logic is
        case L.Value of
            [#true] => return #false
            [#false] => return #true
            [..] => return L
        end case
    end op "not"

    op "and"(Left, R : Logic) -> Logic is
        // NOT YET IMPLEMENTED
        return #x
    end op "and"

    op "or"(Left, R : Logic) -> Logic is
        // NOT YET IMPLEMENTED
        return #x
    end op "or"

    op "xor"(Left, R : Logic) -> Logic is
        // NOT YET IMPLEMENTED
        return #x
    end op "xor"

    op "=="(L, R : Logic) -> Boolean is
        return L.Value == R.Value
    end op "=="

    op "!="(L, R : Logic) -> Boolean is
        return L.Value != R.Value
    end op "!="
end class SailGate::Prelude::Logic

class SailGate::Prelude::Vec is
    var Internal_Ref : Logic<D>;
exports
    op "from_univ"(Univ : Univ_Integer) -> Vec is
        return (Internal_Ref => 0);
    end op "from_univ"

    op "from_univ"(U : Univ_String) -> Vec is
        return (Internal_Ref => 0);
    end op "from_univ"

    op "not"(L : Vec) -> Vec is
        return L
    end op "not"

    op "and"(L, R : Vec) -> Vec is
        return L
    end op "and"

    op "or"(L, R : Vec) -> Vec is
        return L
    end op "or"

    op "xor"(L, R : Vec) -> Vec is
        return L
    end op "xor"

    op "=="(L, R : Vec) -> Boolean is
        return #false
    end op "=="

    op "!="(L, R : Vec) -> Boolean is
        return #false
    end op "!="

    op "indexing"(M : Vec; Key : Univ_Integer) -> Logic<D> is
        return #false;
    end op "indexing"

    op "var_indexing"(ref var M : Vec; Key : Univ_Integer) -> ref var Logic<D> is
        return M.Internal_Ref;
    end op "var_indexing"

    op "[]"() -> Vec is
        return (Internal_Ref => 0);
    end op "[]"
end class SailGate::Prelude::Vec

class SailGate::Prelude::IVec is
    var Internal_Ref : Logic<D>;
exports
    op "from_univ"(Univ : Univ_Integer) -> IVec is
        return (Internal_Ref => 0);
    end op "from_univ"

    op "from_univ"(U : Univ_String) -> IVec is
        return (Internal_Ref => 0);
    end op "from_univ"

    op "not"(L : IVec) -> IVec is
        return L
    end op "not"

    op "and"(L, R : IVec) -> IVec is
        return L
    end op "and"

    op "or"(L, R : IVec) -> IVec is
        return L
    end op "or"

    op "xor"(L, R : IVec) -> IVec is
        return L
    end op "xor"

    op "=="(L, R : IVec) -> Boolean is
        return #false
    end op "=="

    op "!="(L, R : IVec) -> Boolean is
        return #false
    end op "!="

    op ">>"(L, R : IVec) -> IVec is
        return L
    end op ">>"

    op "<<"(L, R : IVec) -> IVec is
        return L
    end op "<<"

    op "+"(L, R : IVec) -> IVec is
        return L
    end op "+"

    op "-"(L, R : IVec) -> IVec is
        return L
    end op "-"

    op "*"(L, R : IVec) -> IVec is
        return L
    end op "*"

    op "/"(L, R : IVec) -> IVec is
        return L
    end op "/"

    op "mod"(L, R : IVec) -> IVec is
        return L
    end op "mod"

    op "indexing"(M : IVec; Key : Univ_Integer) -> Logic<D> is
        return #false;
    end op "indexing"

    op "var_indexing"(ref var M : IVec; Key : Univ_Integer) -> ref var Logic<D> is
        return M.Internal_Ref;
    end op "var_indexing"

    op "[]"() -> IVec is
        return (Internal_Ref => 0);
    end op "[]"
end class SailGate::Prelude::IVec

class SailGate::Prelude::UVec is
    var Internal_Ref : Logic<D>;
exports
    op "from_univ"(Univ : Univ_Integer) -> UVec is
        return (Internal_Ref => 0);
    end op "from_univ"

    op "from_univ"(U : Univ_String) -> UVec is
        return (Internal_Ref => 0);
    end op "from_univ"

    op "not"(L : UVec) -> UVec is
        return L
    end op "not"

    op "and"(L, R : UVec) -> UVec is
        return L
    end op "and"

    op "or"(L, R : UVec) -> UVec is
        return L
    end op "or"

    op "xor"(L, R : UVec) -> UVec is
        return L
    end op "xor"

    op "=="(L, R : UVec) -> Boolean is
        return #false
    end op "=="

    op "!="(L, R : UVec) -> Boolean is
        return #false
    end op "!="

    op ">>"(L, R : UVec) -> UVec is
        return L
    end op ">>"

    op "<<"(L, R : UVec) -> UVec is
        return L
    end op "<<"

    op "+"(L, R : UVec) -> UVec is
        return L
    end op "+"

    op "-"(L, R : UVec) -> UVec is
        return L
    end op "-"

    op "*"(L, R : UVec) -> UVec is
        return L
    end op "*"

    op "/"(L, R : UVec) -> UVec is
        return L
    end op "/"

    op "mod"(L, R : UVec) -> UVec is
        return L
    end op "mod"

    op "indexing"(M : UVec; Key : Univ_Integer) -> Logic<D> is
        return #false;
    end op "indexing"

    op "var_indexing"(ref var M : UVec; Key : Univ_Integer) -> ref var Logic<D> is
        return M.Internal_Ref;
    end op "var_indexing"

    op "[]"() -> UVec is
        return (Internal_Ref => 0);
    end op "[]"
end class SailGate::Prelude::UVec
