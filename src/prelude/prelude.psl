/// Mostly empty implementations for RTL types. Most functions will
/// remain unimplemented because they aren't meant to be run. They're
/// here so the user can define entities inside ParaSail's syntax.
/// The methods that are defined are related to compile-time conversion.

class SailGate::Prelude is
exports
    class Domain is
        type Domain_Level is Integer<0..3>;

        const Level : Domain_Level;
        const Name : Univ_Enumeration;

        const ASYNC_ID := 0;
        const CLOCK_ID := 1;
        const CLOCK_RESET_ID := 2;
        const CLOCK_RESET_ENABLE_ID := 3;
    exports
        func Has_Clock(D : Domain) -> Boolean is
            return D.Level >= CLOCK_ID;
        end func Has_Clock

        func Has_Reset(D : Domain) -> Boolean is
            return D.Level >= CLOCK_RESET_ID;
        end func Has_Reset

        func Has_Enable(D : Domain) -> Boolean is
            return D.Level >= CLOCK_RESET_ID;
        end func Has_Enable

        func Get_Async() -> Domain is
            return (Name => #async, Level => ASYNC_ID);
        end func Get_Async

        func Clock(Name : Univ_Enumeration) -> Domain is
            return (Name => Name, Level => CLOCK_ID);
        end func Clock

        func Clock_Reset(Name : Univ_Enumeration) -> Domain is
            return (Name => Name, Level => CLOCK_RESET_ID);
        end func Clock_Reset

        func Clock_Reset_Enable(Name : Univ_Enumeration) -> Domain is
            return (Name => Name, Level => CLOCK_RESET_ENABLE_ID);
        end func Clock_Reset_Enable

        op "=?"(L, R : Domain) -> Ordering is
            if L is null or else R is null then
                return (if L is null and then R is null then #equal else #unordered);
            end if

            if L.Name == R.Name then
                {*"Clock domain name conflict"* L.Level == R.Level}
                return #equal;
            else
                return #unordered;
            end if
        end op "=?"

        func Rising(D : Domain) -> Boolean is
            return #true;
        end func Rising

        func Falling(D : Domain) -> Boolean is
            return #true;
        end func Falling
    end class Domain

    /// Implementations for utility types and functions
    class Util is
    exports
        func Is_Logic_Char(S : Univ_Character) -> Boolean is
            return S == 'X' or S == 'Z' or S == 'T' or
                S == 'F' or S == '-';
        end func Is_Logic_Char

        func Is_Bit_Char(S : Univ_Character) -> Boolean is
            return S == '0' or S == '1';
        end func Is_Bit_Char

        func Is_Vec_Str(S : Univ_String; SZ : Vec_Size) -> Boolean is
            return Length(S) == SZ and (for all I in Bounds(S) =>
                Util::Is_Bit_Char(S[I]));
        end func Is_Vec_Str

        func In_UBounds(U : Univ_Integer; SZ : Vec_Size) -> Boolean is
            return U >= 0 and U < (2 ** SZ);
        end func In_UBounds

        func In_SBounds(U : Univ_Integer; SZ : Vec_Size) -> Boolean is
            const Half_Unsigned := (2 ** SZ) / 2;
            return U >= -Half_Unsigned and U < Half_Unsigned;
        end func In_SBounds
    end class Util


    class Logic is
    exports
        op "from_univ"(Univ : Univ_Enumeration) -> Logic is
            return with (Value => Univ);
        end op "from_univ"

        op "from_univ"(Univ : Univ_Integer) -> Logic is
            case Univ of
                [0] => return #false
                [..] => return #true
            end case
        end op "from_univ"

        op "from_univ"(S : Univ_Character) -> Logic is
            case S of
                ['T'] => return #true
                ['F'] => return #false
                ['-'] => return #dont_care
                ['X'] => return #x
                ['Z'] => return #z
            end case
        end op "from_univ"

        op "not"(L : Logic) -> Logic is
            case L.Value of
                [#true] => return #false
                [#false] => return #true
                [..] => return L
            end case
        end op "not"

        op "and"(Left, R : Logic) -> Logic is
            {#false}
        end op "and"

        op "or"(Left, R : Logic) -> Logic is
            {#false}
        end op "or"

        op "xor"(Left, R : Logic) -> Logic is
            {#false}
        end op "xor"

        op "=?"(L, R : Logic) -> Ordering is
            {#false}
        end op "=?"
    end class Logic

    class Vec_Index is
    exports
        op "from_univ"(U : Univ_Integer) -> Vec_Index is
            return with (Val => U);
        end op "from_univ"
    end class Vec_Index

    class Vec is
        var Internal_Ref : Logic<D>;
    exports
        op "from_univ"(Univ : Univ_Integer) -> Vec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "from_univ"(U : Univ_String) -> Vec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "not"(L : Vec) -> Vec is
            return L
        end op "not"

        op "and"(L, R : Vec) -> Vec is
            return L
        end op "and"

        op "or"(L, R : Vec) -> Vec is
            return L
        end op "or"

        op "xor"(L, R : Vec) -> Vec is
            return L
        end op "xor"

        op "=?"(L, R : Vec) -> Ordering is
            {#false}
        end op "=?"

        op "indexing"(M : Vec; Key : Vec_Index<S>) -> Logic<D> is
            return #false;
        end op "indexing"

        op "var_indexing"(ref var M : Vec; Key : Vec_Index<S>) -> ref var Logic<D> is
            return M.Internal_Ref;
        end op "var_indexing"

        op "[]"() -> Vec is
            return (Internal_Ref => 0);
        end op "[]"
    end class Vec

    class IVec is
        var Internal_Ref : Logic<D>;
    exports
        op "from_univ"(Univ : Univ_Integer) -> IVec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "from_univ"(U : Univ_String) -> IVec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "not"(L : IVec) -> IVec is
            return L
        end op "not"

        op "and"(L, R : IVec) -> IVec is
            return L
        end op "and"

        op "or"(L, R : IVec) -> IVec is
            return L
        end op "or"

        op "xor"(L, R : IVec) -> IVec is
            return L
        end op "xor"

        op "=?"(L, R : IVec) -> Ordering is
            {#false}
        end op "=?"

        op ">>"(L, R : IVec) -> IVec is
            return L
        end op ">>"

        op "<<"(L, R : IVec) -> IVec is
            return L
        end op "<<"

        op "+"(L, R : IVec) -> IVec is
            return L
        end op "+"

        op "-"(L, R : IVec) -> IVec is
            return L
        end op "-"

        op "*"(L, R : IVec) -> IVec is
            return L
        end op "*"

        op "/"(L, R : IVec) -> IVec is
            return L
        end op "/"

        op "mod"(L, R : IVec) -> IVec is
            return L
        end op "mod"

        op "indexing"(M : IVec; Key : Vec_Index<S>) -> Logic<D> is
            return #false;
        end op "indexing"

        op "var_indexing"(ref var M : IVec; Key : Vec_Index<S>) -> ref var Logic<D> is
            return M.Internal_Ref;
        end op "var_indexing"

        op "[]"() -> IVec is
            return (Internal_Ref => 0);
        end op "[]"

        func Logic_Vec(V : IVec) -> Vec<S, D> is
            return (Internal_Ref => 0);
        end func Logic_Vec
    end class IVec

    class UVec is
        var Internal_Ref : Logic<D>;
    exports
        op "from_univ"(Univ : Univ_Integer) -> UVec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "from_univ"(U : Univ_String) -> UVec is
            return (Internal_Ref => 0);
        end op "from_univ"

        op "not"(L : UVec) -> UVec is
            return L
        end op "not"

        op "and"(L, R : UVec) -> UVec is
            return L
        end op "and"

        op "or"(L, R : UVec) -> UVec is
            return L
        end op "or"

        op "xor"(L, R : UVec) -> UVec is
            return L
        end op "xor"

        op "=?"(L, R : UVec) -> Ordering is
            {#false}
        end op "=?"

        op ">>"(L, R : UVec) -> UVec is
            return L
        end op ">>"

        op "<<"(L, R : UVec) -> UVec is
            return L
        end op "<<"

        op "+"(L, R : UVec) -> UVec is
            return L
        end op "+"

        op "-"(L, R : UVec) -> UVec is
            return L
        end op "-"

        op "*"(L, R : UVec) -> UVec is
            return L
        end op "*"

        op "/"(L, R : UVec) -> UVec is
            return L
        end op "/"

        op "mod"(L, R : UVec) -> UVec is
            return L
        end op "mod"

        op "indexing"(M : UVec; Key : Vec_Index<S>) -> Logic<D> is
            return #false;
        end op "indexing"

        op "var_indexing"(ref var M : UVec; Key : Vec_Index<S>) -> ref var Logic<D> is
            return M.Internal_Ref;
        end op "var_indexing"

        op "[]"() -> UVec is
            return (Internal_Ref => 0);
        end op "[]"

        func Logic_Vec(V : UVec) -> Vec<S, D> is
            return (Internal_Ref => 0);
        end func Logic_Vec
    end class UVec

end class SailGate::Prelude

