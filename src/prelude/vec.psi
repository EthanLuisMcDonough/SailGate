// Checked vector index
interface SailGate::Prelude::Vec_Index<S : Vec_Size> is
    const Val : Univ_Integer;
    op "from_univ"(U : Univ_Integer {U < S}) -> Vec_Index;
end interface SailGate::Prelude::Vec_Index

/// Base vector type
abstract interface SailGate::Prelude::Vec_Rtl_Type
        <S : Vec_Size; D is Async<>; T is Scalar_Type<>>
        extends SailGate::Prelude::Rtl_Type<D> is
    op "not"(L : Vec_Rtl_Type) -> Vec_Rtl_Type;
    op "and"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
    op "or"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
    op "xor"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
    op "=?"(L, R : Vec_Rtl_Type) -> Ordering;
    op "indexing"(M : Vec_Rtl_Type; Key : Vec_Index<S>) -> T;
    op "var_indexing"(ref var M : Vec_Rtl_Type; Key : Vec_Index<S>) -> ref var T;
    op "[]"() -> Vec_Rtl_Type;
end interface SailGate::Prelude::Vec_Rtl_Type

/// Base type for logic vectors
abstract interface SailGate::Prelude::Base_Logic_Vec
    <S : Vec_Size; D is Async<>> extends Vec_Rtl_Type<S, D, Logic<D>> is
end interface SailGate::Prelude::Base_Logic_Vec

/// Realized logic vector type. Represents a bundle of wires of length S.
/// Corresponds with logic_vec in VHDL.
interface SailGate::Prelude::Vec<S : Vec_Size; D is Async<>>
        extends Base_Logic_Vec<S, D> is
    op "not"(L : Vec) -> Vec;
    op "and"(L, R : Vec) -> Vec;
    op "or"(L, R : Vec) -> Vec;
    op "xor"(L, R : Vec) -> Vec;
    op "=?"(L, R : Vec) -> Ordering;
    op "indexing"(M : Vec; Key : Vec_Index<S>) -> Logic<D>;
    op "var_indexing"(ref var M : Vec; Key : Vec_Index<S>) -> ref var Logic<D>;
    op "[]"() -> Vec;
    op "from_univ"(Univ : Univ_Integer {Util::In_UBounds(Univ, S)}) -> Vec;
    op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, S)}) -> Vec;
end interface SailGate::Prelude::Vec

/// Base type for signed logic vectors
abstract interface SailGate::Prelude::Base_Int_Vec
        <S : Vec_Size; D is Async<>>
        extends Base_Logic_Vec<S, D> is
    op ">>"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "<<"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "+"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "-"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "*"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "/"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "mod"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    func Logic_Vec(V : Base_Int_Vec) -> Vec<S, D>;
end interface SailGate::Prelude::Base_Int_Vec

/// Represents a logic vector that carries a signed integer value.
/// Allows signed arithmetic operations to be applied to value.
interface SailGate::Prelude::IVec<S : Vec_Size; D is Async<>>
        extends Base_Int_Vec<S, D> is
    op "not"(L : IVec) -> IVec;
    op "and"(L, R : IVec) -> IVec;
    op "or"(L, R : IVec) -> IVec;
    op "xor"(L, R : IVec) -> IVec;
    op "=?"(L, R : IVec) -> Ordering;
    op "indexing"(M : IVec; Key : Vec_Index<S>) -> Logic<D>;
    op "var_indexing"(ref var M : IVec; Key : Vec_Index<S>) -> ref var Logic<D>;
    op "[]"() -> IVec;
    op ">>"(L, R : IVec) -> IVec;
    op "<<"(L, R : IVec) -> IVec;
    op "+"(L, R : IVec) -> IVec;
    op "-"(L, R : IVec) -> IVec;
    op "*"(L, R : IVec) -> IVec;
    op "/"(L, R : IVec) -> IVec;
    op "mod"(L, R : IVec) -> IVec;
    op "from_univ"(Univ : Univ_Integer {Util::In_SBounds(Univ, S)}) -> IVec;
    op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, S)}) -> IVec;
    func Logic_Vec(V : IVec) -> Vec<S, D>;
end interface SailGate::Prelude::IVec

/// Represents a logic vector that carries an unsigned integer value.
/// Allows unsigned arithmetic operations to be applied to value.
interface SailGate::Prelude::UVec<S : Vec_Size; D is Async<>>
        extends Base_Int_Vec<S, D> is
    op "not"(L : UVec) -> UVec;
    op "and"(L, R : UVec) -> UVec;
    op "or"(L, R : UVec) -> UVec;
    op "xor"(L, R : UVec) -> UVec;
    op "=?"(L, R : UVec) -> Ordering;
    op "indexing"(M : UVec; Key : Vec_Index<S>) -> Logic<D>;
    op "var_indexing"(ref var M : UVec; Key : Vec_Index<S>) -> ref var Logic<D>;
    op "[]"() -> UVec;
    op ">>"(L, R : UVec) -> UVec;
    op "<<"(L, R : UVec) -> UVec;
    op "+"(L, R : UVec) -> UVec;
    op "-"(L, R : UVec) -> UVec;
    op "*"(L, R : UVec) -> UVec;
    op "/"(L, R : UVec) -> UVec;
    op "mod"(L, R : UVec) -> UVec;
    op "from_univ"(Univ : Univ_Integer {Util::In_UBounds(Univ, S)}) -> UVec;
    op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, S)}) -> UVec;
    func Logic_Vec(V : UVec) -> Vec<S, D>;
end interface SailGate::Prelude::UVec
