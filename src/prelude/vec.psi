/// Base vector type
abstract interface SailGate::Prelude::Vec_Rtl_Type<S : Vec_Size; T is Scalar_Type<>>
        extends SailGate::Prelude::Rtl_Type<> is
    op "not"(L : Vec_Rtl_Type) -> Vec_Rtl_Type;
    op "and"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
    op "or"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
    op "xor"(L, R : Vec_Rtl_Type) -> Vec_Rtl_Type;
    op "=="(L, R : Vec_Rtl_Type) -> Boolean;
    op "!="(L, R : Vec_Rtl_Type) -> Boolean;
    op "indexing"(M : Vec_Rtl_Type; Key : Univ_Integer) -> T;
    op "var_indexing"(ref var M : Vec_Rtl_Type; Key : Univ_Integer) -> ref var T;
    op "[]"() -> Vec_Rtl_Type;
end interface SailGate::Prelude::Vec_Rtl_Type

/// Base type for logic vectors
abstract interface SailGate::Prelude::Base_Logic_Vec<S : Vec_Size>
    extends Vec_Rtl_Type<S, Logic<>> is
end interface SailGate::Prelude::Base_Logic_Vec

/// Base type for signed logic vectors
abstract interface SailGate::Prelude::Base_Int_Vec<S : Vec_Size>
        extends Base_Logic_Vec<S> is
    op ">>"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "<<"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "+"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "-"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "*"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "/"(L, R : Base_Int_Vec) -> Base_Int_Vec;
    op "mod"(L, R : Base_Int_Vec) -> Base_Int_Vec;
end interface SailGate::Prelude::Base_Int_Vec

/// Realized logic vector type. Represents a bundle of wires of length S.
/// Corresponds with logic_vec in VHDL.
interface SailGate::Prelude::Vec<S : Vec_Size> extends Base_Logic_Vec<S> is
    op "not"(L : Vec) -> Vec;
    op "and"(L, R : Vec) -> Vec;
    op "or"(L, R : Vec) -> Vec;
    op "xor"(L, R : Vec) -> Vec;
    op "=="(L, R : Vec) -> Boolean;
    op "!="(L, R : Vec) -> Boolean;
    op "indexing"(M : Vec; Key : Univ_Integer) -> Logic;
    op "var_indexing"(ref var M : Vec; Key : Univ_Integer) -> ref var Logic;
    op "[]"() -> Vec;
    op "from_univ"(Univ : Univ_Integer {Util::In_UBounds(Univ, S)}) -> Vec;
    op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, S)}) -> Vec;
end interface SailGate::Prelude::Vec

/// Represents a logic vector that carries a signed integer value.
/// Allows signed arithmetic operations to be applied to value.
interface SailGate::Prelude::IVec<S : Vec_Size> extends Base_Int_Vec<S> is
    op "not"(L : IVec) -> IVec;
    op "and"(L, R : IVec) -> IVec;
    op "or"(L, R : IVec) -> IVec;
    op "xor"(L, R : IVec) -> IVec;
    op "=="(L, R : IVec) -> Boolean;
    op "!="(L, R : IVec) -> Boolean;
    op "indexing"(M : IVec; Key : Univ_Integer) -> Logic;
    op "var_indexing"(ref var M : IVec; Key : Univ_Integer) -> ref var Logic;
    op "[]"() -> IVec;
    op ">>"(L, R : IVec) -> IVec;
    op "<<"(L, R : IVec) -> IVec;
    op "+"(L, R : IVec) -> IVec;
    op "-"(L, R : IVec) -> IVec;
    op "*"(L, R : IVec) -> IVec;
    op "/"(L, R : IVec) -> IVec;
    op "mod"(L, R : IVec) -> IVec;
    op "from_univ"(Univ : Univ_Integer {Util::In_SBounds(Univ, S)}) -> IVec;
    op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, S)}) -> IVec;
end interface SailGate::Prelude::IVec

/// Represents a logic vector that carries an unsigned integer value.
/// Allows unsigned arithmetic operations to be applied to value.
interface SailGate::Prelude::UVec<S : Vec_Size> extends Base_Int_Vec<S> is
    op "not"(L : UVec) -> UVec;
    op "and"(L, R : UVec) -> UVec;
    op "or"(L, R : UVec) -> UVec;
    op "xor"(L, R : UVec) -> UVec;
    op "=="(L, R : UVec) -> Boolean;
    op "!="(L, R : UVec) -> Boolean;
    op "indexing"(M : UVec; Key : Univ_Integer) -> Logic;
    op "var_indexing"(ref var M : UVec; Key : Univ_Integer) -> ref var Logic;
    op "[]"() -> UVec;
    op ">>"(L, R : UVec) -> UVec;
    op "<<"(L, R : UVec) -> UVec;
    op "+"(L, R : UVec) -> UVec;
    op "-"(L, R : UVec) -> UVec;
    op "*"(L, R : UVec) -> UVec;
    op "/"(L, R : UVec) -> UVec;
    op "mod"(L, R : UVec) -> UVec;
    op "from_univ"(Univ : Univ_Integer {Util::In_UBounds(Univ, S)}) -> UVec;
    op "from_univ"(U : Univ_String {Util::Is_Vec_Str(U, S)}) -> UVec;
end interface SailGate::Prelude::UVec
