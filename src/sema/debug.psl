import PSC::Reflection::*;
import SailGate::Sema::*;

class SailGate::Sema::Debug is
    func Dump_Decl_Region(D : Decl; R : Region; Label : Univ_String) is
        if R is null then
            Println("  - " | Label | " region is null");
            return;
        end if
        Println("  - " | Label | " region " | Index(R) |
                " (" | Kind(R) | ")");
        for I in 1..Num_Items(R) forward loop
            const Next_Item := R.Nth_Item(I);
            const Next_Name := Util::Get_Decl_Name(Next_Item);
            const T := Tree_Of(Next_Item);
            Println("   - " | Next_Name | " (" | To_String(Kind(Next_Item)) |
                ") (" | To_String(Kind(T)) | ")");
        end loop
    end func Dump_Decl_Region
exports
    func Dump(D : Decl) is
        const Name := Util::Get_Decl_Name(D);
        const This_Mod := Module_Name(D);
        Println("=== DECL " | Name | " (" | To_String(Kind(D)) | ") ===");
        Dump_Decl_Region(D, Decl_Region(D), "Decl");
        Dump_Decl_Region(D, Body_Region(D), "Body");
    end func Dump

    func Dump(T : Type_Descriptor) is
        Println("=== TYPE " | Name(T) | " ===");
        const Params := Parameters(T);
        Println(" - PARAMS:");
        for I in 1..|Params| forward loop
            const Info := Params[I];
            Println("   - " | To_String(Info.Kind));
        end loop

        const Actuals := Actuals_Of_Formals(T);
        Println(" - ACTUALS:");
        for I in 1..|Actuals| forward loop
            const Info := Actuals[I];
            Println("   - " | To_String(Info.Kind));
        end loop

        const Comps := Components(T);
        Println(" - COMPONENTS:");
        for I in 1..|Comps| forward loop
            const Comp := Comps[I];
            Println("   - " | Name(Comp.Type_Desc));
        end loop

        const Objs := Nested_Objs(T);
        Println(" - NESTED OBJS:");
        for I in 1..|Objs| forward loop
            const Info := Objs[I];
            Println("   - " | Info.Name);
        end loop
    end func Dump

    func Dump(T : Tree; Lvl : Univ_Integer := 0) is
        if T is null then
            return;
        end if

        var Ln := "   " * Lvl | To_String(Kind(T));

        const Operation := Sema::Util::Get_Call_Operation(T);
        if Operation not null then
            Ln |= "(" | Sema::Util::Get_Decl_Name(Operation) | ")";
        end if

        var Dcl := Decl_Of(T);
        if Dcl not null then
            Ln |= "(" | To_String(Kind(Dcl)) | ")";
        end if

        if Pre_Annotation(T) not null then
            Ln |= "(has_pre)";
        end if

        if Post_Annotation(T) not null then
            Ln |= "(has_post)";
        end if

        if Kind(T) == #identifier then
            Ln |= "(" | Identifier(T) | ")";
        end if

        var Typ := Sema::Util::Get_Resolved_Type(T);
        if Typ not null then
            Ln |= "(" | Name(Typ) | ")";
        end if

        const Sym := Sema::Util::Get_Symbol(T);
        if Sym not null then
            Ln |= "(Sym : " | Full_Name(Sym) | ")";
        end if

        const SI := Sema::Util::Get_Sem_Info(T);
        if SI not null then
            Ln |= "(SI : " | Id(Associated_Module(SI)) | ")";
        end if

        if Kind(T) == #binary then
            Ln |= "(binary: " | To_String(Binary_Op(T)) | ")";
        end if

        const Loc := Sema::Util::Find_Tree_Source(T);
        if Loc not null then
            Ln |= " : " | To_String(Loc)
        end if

        Println(Ln);

        for I in 1..Num_Operands(T) forward loop
            const Op := Nth_Operand(T, I);
            if Op not null then
                Dump(Op, Lvl + 1);
            end if
        end loop
    end func Dump
end class SailGate::Sema::Debug
