import PSC::Reflection;

interface SailGate::Sema::Sema_Error<> is
    type Sema_Error_Kind is Enum<[#no_entity, #invalid_field_type,
        #mutable_field, #optional_field, #invalid_inst, #ref_field_type,
        #no_run_fn, #invalid_run_return, #invalid_anno, #non_const_val,
        #field_init_val, #field_non_vec_align, #invalid_param_dom_constr,
        #invalid_param_dom_type, #invalid_param_dom_init, #invalid_invocation,
        #invalid_dom_obj, #dom_obj_in_abstract, #invalid_dom_arg,
        #invalid_rtl_type, #domain_out_of_scope, #invalid_construct,
        #invalid_literal, #literal_out_of_range, #invalid_concat,
        #invalid_binary, #invalid_slice_syntax, #index_out_of_range,
        #slice_bad_size, #mismatched_domain, #expected_switch,
        #item_after_return, #invalid_return_value, #duplicate_case,
        #literal_conversion, #negative_shift, #no_inputs, #no_outputs,
        #self_inst, #underqualified_dom, #instance_not_call, #inst_top_level]>;

    const Kind : Sema_Error_Kind;
    const Source : optional Reflection::Source_Position;

    /// Returns a modified error with the provided source
    func With_Source(E : Sema_Error;
        New_Source : Reflection::Source_Position) -> Sema_Error;

    /// Print out error message
    func Dump(E : Sema_Error);

    op "from_univ"(U : Univ_Enumeration {U in Sema_Error_Kind}) -> Sema_Error;
end interface SailGate::Sema::Sema_Error
