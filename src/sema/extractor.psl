import PSC::Reflection::*;
import SailGate::Sema::*;
import SailGate::Util::*;

class SailGate::Sema::Extractor is
    const Entity_Prefix := Prelude_Prefix | "Entity<";
    const Output_Name := Prelude_Prefix | "Output";
    var Pending : Map<Univ_String, Decl>;

    func Type_Is_Output(Type : Type_Descriptor) -> Boolean is
        if Type is null then
            return #false;
        end if
        const Base := Util::Base_Type(Type);
        const Base_Name := Name(Base);
        return not Is_Abstract(Type) and then
            Base_Name == Output_Name;
    end func Type_Is_Output

    func Type_Is_Entity(Type : Type_Descriptor) -> Boolean is
        if Type is null then
            return #false;
        end if
        const Base := Util::Base_Type(Type);
        const Base_Name := Name(Base);
        return not Is_Abstract(Type) and then
            Starts_With(Base_Name, Entity_Prefix);
    end func Type_Is_Entity

    func Decl_Is_Entity(D : Decl) -> Boolean is
        if Kind(D) != #module then
            return #false
        end if
        const Type_Decl := Util::First_In_Region(Decl_Region(D), #type);
        const Desc := Descriptor_For_Type(Type_Decl);
        return Type_Is_Entity(Desc);
    end func Decl_Is_Entity

    func Decl_Is_Output(D : Decl) -> Boolean is
        if Kind(D) != #module then
            return #false
        end if
        const Type_Decl := Util::First_In_Region(Decl_Region(D), #type);
        const Desc := Descriptor_For_Type(Type_Decl);
        return Type_Is_Output(Desc);
    end func Decl_Is_Output

    func Visit_Entity(var E : Extractor; D : Decl) is
        if Is_Spec(D) then
            Visit_Spec(E, D);
        else
            Visit_Impl(E, D);
        end if
    end func Visit_Entity

    func Visit_Spec(var E : Extractor; D : Decl) is
        const Name := Util::Get_Decl_Name(D);
        E.Pending |= (Key => Name, Value => D);
    end func Visit_Spec

    func Visit_Impl(var E : Extractor; D : Decl) is
        const Name := Util::Get_Decl_Name(D);
        {> Name in E.Pending <}
        E.Entities |= (Name => Name,
            Spec => E.Pending[Name],
            Impl => D);
        E.Pending -= Name;
    end func Visit_Impl
exports
    func Create() -> Extractor is
        return (Entities => [], Pending => [],
            Outputs => []);
    end func Create

    func Load(var Ex : Extractor; var Env : Environment) is
        for I in 1..Env.Num_Library_Items() forward loop
            const Item := Env.Nth_Library_Item(I);
            const Name := Util::Get_Decl_Name(Item);
            if Decl_Is_Entity(Item) then
                Visit_Entity(Ex, Item);
            elsif Decl_Is_Output(Item) then
                Ex.Outputs |= (Key => Name, Value => Item);
            end if
        end loop
    end func Load
end class SailGate::Sema::Extractor
