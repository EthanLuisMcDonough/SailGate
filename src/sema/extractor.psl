import PSC::Reflection::*;
import SailGate::Sema::*;
import SailGate::Util::*;

class SailGate::Sema::Extractor is
    interface Incomplete_Decl<> is
        const Def : Decl;
        const Arch : Routine;
        const Desc : Type_Descriptor;
    end interface Incomplete_Decl

    var Pending : Ordered_Map<Univ_String, Incomplete_Decl>;
    var Visited : Set<Univ_String>;

    /// Checks if a declaration is or is in a module with the given name
    func In_Module(D : Decl; Mod_Name : Univ_String) -> Boolean is
        const Full_Name := Util::Get_Decl_Name(D);
        return Full_Name == Mod_Name or else
            Starts_With(Full_Name, Mod_Name | "::");
    end func In_Module

    // Checks if declaration is from a standard library or
    // SailGate itself. If it is, we don't instrument it
    func Is_Std_Decl(D : Decl) -> Boolean is
        return In_Module(D, "PSC") or else
            In_Module(D, "PSL") or else
            In_Module(D, "SailGate");
    end func Is_Std_Decl

    /// If the type is an entity, return it's architecture. Otherwise,
    /// return null
    func Get_Entity_Arch(Type : Type_Descriptor) -> optional Routine is
        if Type is null then
            return null;
        end if

        var Ops := Operations(Type);
        for I in 1..|Ops| forward loop
            const Ind := Ops[I].Index;
            var R := Routine::Routine_At_Index(Ind);
            if Name(R) == "Run" then
                return R;
            end if
        end loop

        return null;
    end func Get_Entity_Arch

    /// Extracts relevant entity information and returns it as an
    /// incomplete value. This value is stored and then later used to
    /// create the complete entity object
    func Get_Entity(D : Decl) -> optional Incomplete_Decl is
        if D is null or else Kind(D) != #module then
            return null;
        end if

        const Type_Decl := Util::First_In_Region(Decl_Region(D), #type);
        if Type_Decl is null then
            return null;
        end if

        const Desc := Descriptor_For_Type(Type_Decl);
        if Desc is null then
            return null;
        end if

        const Arch := Get_Entity_Arch(Desc);
        if Arch is null then
            return null;
        end if

        return (Def => D, Arch => Arch, Desc => Desc);
    end func Get_Entity

    /// Visit a decl. If its an interface, then add it to the pending
    /// module map. If its a class, pop the pending module from the app
    /// and use that data to create the complete entity
    func Visit_Decl(var E : Extractor; D : Decl) is
        if Kind(D) != #module then
            return;
        end if

        const Entity := Get_Entity(D);
        if Entity not null then
            if Is_Spec(D) then
                Visit_Spec(E, Entity);
            else
                Visit_Impl(E, D);
            end if
            return;
        end if

        if Is_Spec(D) then
            // Check for entities nested inside modules
            // Don't look inside classes, those interfaces are private
            Visit_Region(E, Decl_Region(D));
            Visit_Region(E, Body_Region(D));
        end if
    end func Visit_Decl

    func Visit_Region(var E : Extractor; R : Region) is
        if R is null then
            return;
        end if

        // Skip first, we already visited that one in Visit_Decl
        for J in 2..Num_Items(R) forward loop
            Visit_Decl(E, Nth_Item(R, J));
        end loop
    end func Visit_Region

    func Visit_Spec(var E : Extractor; D : Incomplete_Decl) is
        const Name := Util::Get_Decl_Name(D.Def);
        E.Pending |= (Key => Name, Value => D);
    end func Visit_Spec

    func Visit_Impl(var E : Extractor; D : Decl) is
        const Name := Util::Get_Decl_Name(D);
        {> Name in E.Pending <}
        const Prev <== E.Pending[Name];
        E.Entities |= (Name => Name,
            Spec => Prev.Def, Impl => D,
            Desc => Prev.Desc, Arch => Prev.Arch);
        E.Pending -= Name;
    end func Visit_Impl
exports
    func Create() -> Extractor is
        return (Entities => [], Pending => [],
            Outputs => [], Visited => []);
    end func Create

    func Load(var Ex : Extractor; var Env : Environment) is
        for I in 1..Env.Num_Library_Items() forward loop
            const Item := Env.Nth_Library_Item(I);
            if not Is_Std_Decl(Item) then
                Visit_Decl(Ex, Item);
            end if
        end loop
    end func Load
end class SailGate::Sema::Extractor
