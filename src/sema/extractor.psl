import PSC::Reflection::*;
import SailGate::Sema::*;
import SailGate::Util::*;

class SailGate::Sema::Extractor is
    /// Checks if a declaration is or is in a module with the given name
    func In_Module(D : Decl; Mod_Name : Univ_String) -> Boolean is
        const Full_Name := Util::Get_Decl_Name(D);
        return Full_Name == Mod_Name or else
            Starts_With(Full_Name, Mod_Name | "::");
    end func In_Module

    // Checks if declaration is from a standard library or
    // SailGate itself. If it is, we don't instrument it
    func Is_Std_Decl(D : Decl) -> Boolean is
        return In_Module(D, "PSC") or else
            In_Module(D, "PSL") or else
            In_Module(D, "SailGate");
    end func Is_Std_Decl

    /// Check if we can ignore decl all together
    func Should_Visit(D : Decl) -> Boolean is
        return D not null and then Is_Spec(D) and then Kind(D) == #module;
    end func Should_Visit

    /// Check if module is potential entity or just a package
    func Is_Package(D : Decl) -> Boolean is
        if not Should_Visit(D) then
            return #false;
        end if

        const DR := Decl_Region(D);
        if DR is null then
            return #false;
        end if

        for I in 2..Num_Items(DR) forward loop
            const Item := Nth_Item(DR, I);
            if Kind(Item) != #module then
                return #false;
            end if
        end loop

        return #true;
    end func Is_Package

    /// Visit a decl
    func Visit_Decl(var E : Extractor; D : Decl) is
        if not Should_Visit(D) then
            return;
        end if

        if Is_Package(D) then
            // Check for entities nested inside modules
            Visit_Region(E, Decl_Region(D));
        else
            E.Entities |= Module_Desc::Create(D);
        end if
    end func Visit_Decl

    func Visit_Region(var E : Extractor; R : Region) is
        if R is null then
            return;
        end if

        // Skip first, we already visited that one in Visit_Decl
        for J in 2..Num_Items(R) forward loop
            Visit_Decl(E, Nth_Item(R, J));
        end loop
    end func Visit_Region
exports
    class Module_Desc is
        func Print_Decl_Item(D : Decl) is
            Println("   - " | Id(D) | " (kind: " | Kind(D) |
                ", tree: " | Kind(Tree_Of(D)) | ")");
        end func Print_Decl_Item

        func Print_Decl_Map(M : Decl_Map) is     
            if Is_Empty(M) then
                Println("   [none]");
            else
                for each [Name => D] of M forward loop
                    Print_Decl_Item(D);
                end loop
            end if
        end func Print_Decl_Map
    exports
        func Create(D : Decl) -> Module_Desc is
            var D_Type : optional Decl := null;
            var Objects : Decl_Map := [];
            var Params : Decl_Map := [];
            var Components : Decl_Map := [];
            var Types : Decl_Map := [];
            var Operations : Op_Map := [];
            var Modules : Mod_Map := [];

            const DR := Decl_Region(D);
            for I in 1..Num_Items(DR) forward loop
                const Decl_Item := Nth_Item(DR, I);
                const Decl_Name := Id(Decl_Item);
                const Decl_Tree := Tree_Of(Decl_Item);

                const Map_Val : Decl_Map::Pair := (Key => Decl_Name, Value => Decl_Item);

                if Kind(Decl_Tree) == #param_decl then
                    Params |= Map_Val;
                else
                    case Kind(Decl_Item) of
                        [#module] =>
                            Modules |= (Key => Decl_Name, Value => Create(Decl_Item));
                        [#type] =>
                            if D_Type is null then
                                D_Type := Decl_Item;
                            else
                                Types |= Map_Val;
                            end if
                        [#object] =>
                            const Ind := Component_Index(Decl_Item);
                            if Ind is null then
                                Objects |= Map_Val;
                            else
                                Components |= Map_Val;
                            end if
                        [#operation] =>
                            const R := Routine_For_Operation(Decl_Item);
                            if R not null then
                                const Op : Module_Op := (Name => Name(R),
                                    Decl => Decl_Item, Routine => R);
                                Operations |= (Key => Decl_Name, Value => Op);
                            end if
                    end case
                end if
            end loop

            return (Name => Util::Get_Decl_Name(D),
                Decl => D, Decl_Type => D_Type,
                Type_Desc => Descriptor_For_Type(D_Type),
                Objects => Objects, Params => Params,
                Components => Components, Types => Types,
                Operations => Operations, Modules => Modules);
        end func Create

        func Dump(M : Module_Desc) is
            Println("==== " | Util::Get_Decl_Name(M.Decl) | " ====");
            Println(" - Has type desc: " | To_String(M.Type_Desc is null));

            Println(" - Parameters:");
            Print_Decl_Map(M.Params);

            Println(" - Objects:");
            Print_Decl_Map(M.Objects);

            Println(" - Components:");
            Print_Decl_Map(M.Components);

            Println(" - Types:");
            Print_Decl_Map(M.Types);

            Println(" - Operations:");
            if Is_Empty(M.Operations) then
                Println("   [none]");
            else
                for each [Name => D] of M.Operations forward loop
                    Print_Decl_Item(D.Decl);
                end loop
            end if
        end func Dump
    end class Module_Desc

    func Create() -> Extractor is
        return (Entities => []);
    end func Create

    func Load(var Ex : Extractor; var Env : Environment) is
        for I in 1..Env.Num_Library_Items() forward loop
            const Item := Env.Nth_Library_Item(I);
            if not Is_Std_Decl(Item) then
                Visit_Decl(Ex, Item);
            end if
        end loop
    end func Load
end class SailGate::Sema::Extractor
