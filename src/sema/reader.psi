import PSC::Reflection::*;
import SailGate::Prelude::Domain_Kind;
import SailGate::Sema::Sema_Error;
import SailGate::Util::Result;
import SailGate::IR;

/// Methods for interpreting ParaSail AST nodes as IR values.
/// Most of these are related to reading expressions and types
interface SailGate::Sema::Reader<> is
    type Domain_Result is Result<IR::Domain, Sema_Error>;
    type Type_Result is Result<IR::Type, Sema_Error>;
    type Expr_Result is Result<IR::Expression+, Sema_Error>;

    /// Reads domain parameter from type parameter annotation
    func Dom_Param(D : Decl) -> Domain_Result;

    /// Reads clock domain from object declaration
    func Dom_Obj(D : Decl {Kind(D) == #object}) -> Domain_Result;

    /// Checks if type is an RTL type
    func Type_Is_Rtl(D : Decl {Kind(D) == #type}) -> Boolean;

    /// Reads RTL type info from the result of a Sem_Info call.
    /// This function returns an error if the type is not an RTL type
    func Type_To_Rtl(D : Decl {Kind(D) == #type};
        Pos : Source_Position) -> Type_Result;

    /// Adds offset and direction to existing RTL type based on information
    /// passed in the align tree. This align tree will be an annotation node
    func Add_Alignment(var T : IR::Type; Align_Tree : optional Tree)
        -> optional Sema_Error;

    /// Attempts to read tree as a constant integer. Returns null on failure
    func Read_Const_Int(T : Tree) -> optional Univ_Integer;

    /// Context relevant to expression parsing
    interface Context<> is
        const Enclosing_Module : Univ_String;
    end interface Context

    /// Converts ParaSail AST into IR expression
    func Walk_Expr(Ctx : Context; Expr_Tree : Tree) -> Expr_Result;

    /// Walks condition expression. Resolved conditions are wrapped inside a
    /// call to "to_bool" that converts the value into a native ParaSail boolean.
    /// We don't want that tree because it destroys the domain data Rtl_Bool gives us
    func Walk_Cond(Ctx : Context; Expr_Tree : Tree) -> Expr_Result;

    /// Walks switch/case expression. This expression is expected to be wrapped in
    /// a call to the "Switch" function
    func Walk_Case_Value(Ctx : Context; Expr_Tree : Tree) -> Expr_Result;

    /// Walks invidual switch case item. Interprets literals based on the case
    /// type and adds them to the supplied list.
    func Walk_Case_Selector(Expr_Tree : Tree; Case_Type : IR::Type;
        var Literals : IR::Literals) -> optional Sema_Error;

end interface SailGate::Sema::Reader
