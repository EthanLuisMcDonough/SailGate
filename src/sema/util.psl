import SailGate::Sema::Util::*;
import SailGate::Util::*;
import PSC::Reflection::*;

class SailGate::Sema::Util is
exports
    func Base_Type(Desc : Type_Descriptor) -> Type_Descriptor is
        const Parent := Parent_Type(Desc);
        if Parent not null then
            return Base_Type(Parent);
        end if
        return Desc;
    end func Base_Type

    func Get_Decl_Name(D : Decl) -> Univ_String is
        if Module_Name(D) is null then
            return Id(D);
        end if
        return Module_Name(D) | "::" | Id(D);
    end func Get_Decl_Name

    func First_In_Region(R : Region; Kind : Decl::Decl_Kind) -> optional Decl is
        if R is null then
            return null;
        end if
        for I in 1..Num_Items(R) forward loop
            const Next_Item := R.Nth_Item(I);
            if Kind(Next_Item) == Kind then
                return Next_Item;
            end if
        end loop
    end func First_In_Region

    func Base_Name(Name : Univ_String) -> Univ_String is
        const I := Index_Of(Name, '<');
        if I is null then
            return Name;
        else
            return Name[1..(I - 1)];
        end if
    end func Base_Name
end class SailGate::Sema::Util
