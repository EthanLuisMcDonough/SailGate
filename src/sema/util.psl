import SailGate::Sema::Util::*;
import SailGate::Util::*;
import PSC::Reflection::*;
import SailGate::IR;
import SailGate::Prelude;
import SailGate::Sema::Names;

class SailGate::Sema::Util is
exports
    func Base_Type(Desc : Type_Descriptor) -> Type_Descriptor is
        const Parent := Parent_Type(Desc);
        if Parent not null then
            return Base_Type(Parent);
        end if
        return Desc;
    end func Base_Type

    func Get_Decl_Name(D : Decl) -> Univ_String is
        if Id(D) is null then
            return "<unnamed>";
        end if
        if Module_Name(D) is null then
            return Id(D);
        end if
        return Module_Name(D) | "::" | Id(D);
    end func Get_Decl_Name

    func First_In_Region(R : Region; Kind : Decl::Decl_Kind) -> optional Decl is
        if R is null then
            return null;
        end if
        for I in 1..Num_Items(R) forward loop
            const Next_Item := R.Nth_Item(I);
            if Kind(Next_Item) == Kind then
                return Next_Item;
            end if
        end loop
    end func First_In_Region

    func Base_Name(Name : Univ_String) -> Univ_String is
        const I := Index_Of(Name, '<');
        if I is null then
            return Name;
        else
            return Name[1..(I - 1)];
        end if
    end func Base_Name

    func Find_Tree_Source(T : Tree) -> optional Source_Position is
        if T is null then
            return null;
        end if

        const Tree_Source := Source_Pos(T);
        if Tree_Source not null then
            return Tree_Source;
        end if

        for I in 1..Num_Operands(T) forward loop
            const Op := Nth_Operand(T, I);
            if Op not null then
                const Op_Source := Find_Tree_Source(Op);
                if Op_Source not null then
                    return Op_Source;
                end if
            end if
        end loop
    end func Find_Tree_Source

    func Get_Call_Operation(T : Tree) -> optional Decl is
        const Direct_Op := Call_Operation(T);
        if Direct_Op not null then
            return Direct_Op;
        end if

        const Resolved_Op := Resolved_Interp(T);
        if Resolved_Op not null then
            var Op := Call_Operation(Resolved_Op);
            if Op not null then
                return Op;
            end if
        end if

        return null;
    end func Get_Call_Operation

    func Get_Resolved_Type(T : Tree) -> optional Type_Descriptor is
        if T is null then
            return null;
        end if

        const Typ := Resolved_Type(T);
        if Typ not null then
            return Typ;
        end if

        const RI := Resolved_Interp(T);
        if RI not null then
            const RT := Resolved_Type(T);
            if RT not null then
                return RT;
            end if
        end if
    end func Get_Resolved_Type

    func Get_Sem_Info(T : Tree) -> optional Decl is
        if T is null then
            return null;
        end if

        const SI := Sem_Info(T);
        if SI not null then
            return SI;
        end if

        const RI := Resolved_Interp(T);
        if RI not null then
            const RSI := Sem_Info(T);
            if RSI not null then
                return RSI;
            end if
        end if
    end func Get_Sem_Info

    func Get_Symbol(T : Tree) -> optional Symbol is
        if T is null then
            return null;
        end if

        const Sym := Symbol(T);
        if Sym not null then
            return Sym;
        end if

        const RI := Resolved_Interp(T);
        if RI not null then
            const RS := Symbol(T);
            if RS not null then
                return RS;
            end if
        end if
    end func Get_Symbol
end class SailGate::Sema::Util
