import PSC::Reflection;
import SailGate::*;
import SailGate::Util::*;
import SailGate::IR;
import SailGate::Sema;
import SailGate::Sema::Reader;
import SailGate::Sema::Names;

class SailGate::Sema::Validator is
    type Entity_Result is Result<Univ_String, Sema_Error>;

    /// Traverses Decl AST and inserts valid entity rep into the entity map
    func Check(var V : Validator; D : Extractor::Raw_Entity_Data) -> Entity_Result is
        Println("Visiting " | D.Name);

        // Gather inputs
        const Run_Params := Parameters(D.Arch);
        var Inputs : IR::Entity::Port_Def := [];
        for I in 1..|Run_Params| forward loop
            const P := Run_Params[I];
            const P_Decl := P.Param_Decl;
            const P_Tree := Tree_Of(P_Decl);
            const P_Source := Decl_Source_Pos(P_Decl);
            const P_Name := Id(P_Decl);

            if P.Is_Operation_Output then
                if not P.Is_Of_Current_Inst_Type then
                    return Entity_Result::Err((
                        Kind => #invalid_run_return,
                        Source => P_Source));
                end if
            else
                if P.Is_Var then
                    return Entity_Result::Err((
                        Kind => #mutable_field,
                        Source => P_Source));
                end if

                if P.Is_Passed_By_Ref then
                    return Entity_Result::Err((
                        Kind => #ref_field_type,
                        Source => P_Source));
                end if

                const Type_Desc := Type_Desc_At_Locator(P.Type_Info);
                var Rtl_Type := Reader::Type_To_Rtl(Type_Desc);
                if P.Is_Optional or else Rtl_Type is null or else
                        not Valid_Field_Type(Rtl_Type.Val) then
                    return Entity_Result::Err((
                        Kind => #invalid_field_type,
                        Source => P_Source));
                end if

                // Parse align clause
                const Align_Stmt := Pre_Annotation(P_Tree);
                const Align_Err := Reader::Add_Alignment(Rtl_Type, Align_Stmt);
                if Align_Err not null then
                    return Entity_Result::Err(Align_Err);
                end if

                Inputs |= (Key => P_Name, Value => Rtl_Type);
            end if
        end loop

        // Gather outputs
        // Each output should be an obj_decl tree with a null value
        const Comp := Components(D.Desc);
        var Outputs : IR::Entity::Port_Def := [];
        for I in 1..|Comp| forward loop
            var Rtl_Type := Reader::Type_To_Rtl(Comp[I].Type_Desc);
            const Comp_Decl := Comp[I].Component_Decl;
            const Comp_Source := Decl_Source_Pos(Comp_Decl);
            const Comp_Tree := Tree_Of(Comp_Decl);
            const Comp_Name := Id(Comp_Decl);

            {Kind(Comp_Tree) == #obj_decl}

            if Nth_Operand(Comp_Tree, Reflection::Tree::Obj_Decl_Value_Op)
                    not null then
                return Entity_Result::Err((
                    Kind => #field_init_val,
                    Source => Comp_Source));
            end if

            // Parse align clause
            const Align_Stmt := Pre_Annotation(Comp_Tree);
            const Align_Err := Reader::Add_Alignment(Rtl_Type, Align_Stmt);
            if Align_Err not null then
                return Entity_Result::Err(Align_Err);
            end if

            if Comp[I].Is_By_Ref then
                return Entity_Result::Err((
                    Kind => #ref_field_type,
                    Source => Comp_Source));
            end if

            if Comp[I].Is_Var then
                return Entity_Result::Err((
                    Kind => #mutable_field,
                    Source => Comp_Source));
            end if

            if Rtl_Type is null or else not Valid_Field_Type(Rtl_Type.Val) then
                return Entity_Result::Err((
                    Kind => #invalid_field_type,
                    Source => Comp_Source));
            end if

            Outputs |= (Key => Comp_Name, Value => Rtl_Type);
        end loop

        const Base_Name := Name(D.Desc);

        const Entity : IR::Entity := (
            Inputs => Inputs, Outputs => Outputs,
            Domains => [], Behavior => D.Arch);
        V.Entities |= (Key => Base_Name, Value => Entity);

        return Entity_Result::Ok(Base_Name);
    end func Check
exports
    func Create() -> Validator is
        return (Entities => []);
    end func Create

    func Check(var V : Validator; Ex : Extractor) -> optional Sema_Error is
        if |Ex.Entities| == 0 then
            return (Kind => #no_entity, Source => null);
        end if
        for I in 1..|Ex.Entities| forward loop
            const Res := Check(V, Ex.Entities[I]);
            if Is_Err(Res) then
                return Err(Res);
            end if
        end loop
    end func Check

    func Dump(V : Validator) is
        for each [Name => Rep] of V.Entities loop
            Println("=== ENTITY " | Name | " ===");
            Println("Inputs: ");
            for each [Input_Name => Input_Type] of Rep.Inputs loop
                Println(" - " | Input_Name | " " | To_String(Input_Type));
            end loop
            Println("Outputs: ");
            for each [Input_Name => Input_Type] of Rep.Outputs loop
                Println(" - " | Input_Name | " " | To_String(Input_Type));
            end loop
        end loop
    end func Dump
end class SailGate::Sema::Validator
