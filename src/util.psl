class SailGate::Util is
exports
    func Starts_With(Str : Univ_String; Prefix : Univ_String) -> Boolean is
        const Prefix_Size := |Prefix|;
        return Length(Str) >= Prefix_Size and then
            Str[1..Prefix_Size] == Prefix;
    end func Starts_With

    func Index_Of(Str : Univ_String; C : Univ_Character; Start : Univ_Integer) -> optional Univ_Integer is
        for I in Start..|Str| forward loop
            if Str[I] == C then
                return I;
            end if
        end loop
    end func Index_Of

    class Either is
        abstract interface Either_Internal_Base<> is
            func Is_Left(E : Either_Internal_Base) -> Boolean;
            func Get_Left(E : Either_Internal_Base) -> L;
            func Get_Right(E : Either_Internal_Base) -> R;
        end interface Either_Internal_Base

        interface Internal_Left<> implements Either_Internal_Base<> is
            func Is_Left(L : Internal_Left) -> Boolean;
            func Get_Left(L : Internal_Left) -> L;
            func Get_Right(L : Internal_Left) -> R;
        end interface Internal_Left

        interface Internal_Right<> implements Either_Internal_Base<> is
            func Is_Left(R : Internal_Right) -> Boolean;
            func Get_Left(R : Internal_Right) -> L;
            func Get_Right(R : Internal_Right) -> R;
        end interface Internal_Right

        class Internal_Left is
            var Left_Val : L;
        exports
            func Is_Left(L : Internal_Left) -> Boolean is
                return #true;
            end func Is_Left

            func Get_Left(L : Internal_Left) -> L is
                return L.Left_Val;
            end func Get_Left

            func Get_Right(L : Internal_Left) -> R is
                {#false}
            end func Get_Right
        end class Internal_Left

        class Internal_Right is
            var Right_Val : R;
        exports
            func Is_Left(R : Internal_Right) -> Boolean is
                return #false;
            end func Is_Left

            func Get_Left(R : Internal_Right) -> L is
                {#false}
            end func Get_Left

            func Get_Right(R : Internal_Right) -> R is
                return R.Right_Val;
            end func Get_Right
        end class Internal_Right

        var Value : Either_Internal_Base+;
    exports
        func Left(Val : L) -> Either is
            return (Value => Internal_Left::(Left_Val => Val), Kind => #left);
        end func Left

        func Right(Val : R) -> Either is
            return (Value => Internal_Right::(Right_Val => Val), Kind => #right);
        end func Right

        func Is_Left(E : Either) -> Boolean is
            return E.Kind == #left;
        end func Is_Left

        func Is_Right(E : Either) -> Boolean is
            return E.Kind == #right;
        end func Is_Right

        func Get_Left(E : Either) -> optional L is
            if Is_Left(E) then
                return Unwrap_Left(E);
            else
                return null;
            end if
        end func Get_Left

        func Get_Right(E : Either) -> optional R is
            if Is_Right(E) then
                return Unwrap_Right(E);
            else
                return null;
            end if
        end func Get_Right

        func Unwrap_Left(E : Either) -> L is
            {> Is_Left(E) <}
            return Get_Left(E.Value);
        end func Unwrap_Left

        func Unwrap_Right(E : Either) -> R is
            {> Is_Right(E) <}
            return Get_Right(E.Value);
        end func Unwrap_Right
    end class Either

    class Result is
        type Internal_Either is Either<T, E>;
        const Val : Internal_Either;
    exports
        func Ok(Val : T) -> Result is
            return (Val => Internal_Either::Left(Val));
        end func Ok

        func Err(Val : E) -> Result is
            return (Val => Internal_Either::Right(Val));
        end func Err

        func Is_Ok(R : Result) -> Boolean is
            return Is_Left(R.Val);
        end func Is_Ok

        func Is_Err(R : Result) -> Boolean is
            return Is_Right(R.Val);
        end func Is_Err

        func Ok(R : Result) -> optional T is
            return Get_Left(R.Val);
        end func Ok

        func Err(R : Result) -> optional E is
            return Get_Right(R.Val);
        end func Err

        func Unwrap(R : Result) -> T is
            return Unwrap_Left(R.Val);
        end func Unwrap

        func Unwrap_Err(R : Result) -> E is
            return Unwrap_Right(R.Val);
        end func Unwrap_Err
    end class Result
end class SailGate::Util
